{"name":"Trajectory Outlier Detection","tagline":"An Open-Source Library","body":"## Overview\r\n\r\n\r\nThis is an open-source library to find outlier trajectories in a dataset. This library is based on the work of [Jae-Gil Lee](http://dm.kaist.ac.kr/jaegil/ ) and others.\r\n\r\n## What are trajectories?\r\n\r\nTrajectories are everywhere - pedestrians, vehicles, hurricanes, animals, and many other objects produce trajectories of position information that change over time. Trajectory mining seeks to identify patterns and interesting features in trajectory datasets. Trajectory mining techniques can be used to categorize paths of hurricanes, identify suspicious individuals in a park, or predict the destination of a car in a city.\r\n\r\n## Background and motivations\r\nThis is a library for trajectory outlier detection that uses the algorithm presented by \r\nJae-Gil Lee and others in their paper [Trajectory Outlier Detection: A Partition-and-Detect Framework][1] \\[1\\]. Outlier trajectories have paths that are not similar to other trajectories in the dataset.\r\n\r\nThis code is based heavily on the source code made available on Jae-Gil Lee's [webpage][2]. The code on on his website is a complete implementation of their algorithm, but like most research prototypes it includes little documentation and is unusable as a general-purpose library. Additionally, it was written with Microsoft Visual Studio - it uses Windows-specific visualization and proprietary Microsoft C++ structures. _Therefore, the goal of this project was to take that implementation and rewrite it as a cross-platform library_. \r\n\r\n<sub>\\[1\\] Jae-Gil Lee, Jiawei Han, and Xiaolei Li. 2008. Trajectory Outlier Detection: \r\nA Partition-and-Detect Framework. In Proceedings of the 2008 IEEE 24th International \r\nConference on Data Engineering (ICDE '08). IEEE Computer Society, Washington, DC, USA, 140-149.</sub>\r\n\r\n## Trajectory Plotting\r\n\r\n\r\nThis graphic of the trajectories in a hurricane dataset is an example of the plotting functionality of the library. Plots are generated with Gnuplot, a generic cross-platform plotting library.\r\n\r\n![Plotting Trajectories](images/example2.png)\r\n\r\n## Outlier Plotting\r\n\r\nAfter finding outliers in the hurricane dataset we can plot outlier trajectories (red) and outlying partitions (thick red).\r\n\r\n![Outlier Plotting](images/example.png)\r\n\r\n## Basic Algorithm Overview\r\n\r\nThe library is based on the trajectory outlier detection algorithm presented in \\[1\\].\r\n\r\nThe key goal behind the algorithm is to not just identify outlying trajectories, but outlying _sub_-trajectories. With long and complicated trajectories much of an anomalous trajectory may still be similar to other trajectories - so we want to a way to identify the outlying _part_ of a trajectory, or sub-trajectory.\r\n\r\n![Outlying Subtrajectories](images/outlyingSubtrajectorySmall.png)\r\n<sub>Graphic from \\[1\\]</sub>\r\n\r\nTo do this, the algorithm employs a _Partition-and-Detect_ framework. Trajectories are first divided into partitions that efficiently describe the movement of the trajectory in a concise set of linear line segments called. The partitions are are then compared spatially to find outlying segments. An overall trajectory is deemed to be outlying if a significant portion of its path is composed of outlying segments.\r\n\r\n![Partition-and-Detect](images/partitionAndDetectSmall.png)\r\n<sub>Graphic from \\[1\\]</sub>\r\n\r\n<sub>\\[1\\] Jae-Gil Lee, Jiawei Han, and Xiaolei Li. 2008. Trajectory Outlier Detection: \r\nA Partition-and-Detect Framework. In Proceedings of the 2008 IEEE 24th International \r\nConference on Data Engineering (ICDE '08). IEEE Computer Society, Washington, DC, USA, 140-149.</sub>\r\n\r\n## Requirements\r\n\r\nThe code was written to be portable across all major platforms. The code was written in C++11 and must be compiled with a C++11 compatible compiler such as [gcc](https://gcc.gnu.org/). Plotting functionality is provided by the cross-platform [gnuplot](http://gnuplot.info/) library.\r\n\r\nThe code was tested in Linux and compiled with gcc 4.8.2.\r\n\r\n## Trajectory File Format\r\n\r\nTrajectory data must be represented in a specific file format to be read properly. The characteristics of the file are:\r\n\r\n* Line 1 contains an integer representing the number of dimensions in the dataset\r\n* Line 2 contains an integer representing the number of trajectories in the dataset\r\n* Lines 3 through the end of the file contain the trajectories, one per line\r\n    * Each trajectory line contains numbers separated by spaces. The first field is the numeric trajectory ID, the second field is the number of data points contained in the trajectory path, and the rest of the line contains the positions of each data point in the format x1 y1 x2 y2 x3 y3 x4 y4 ... (for a 2-D dataset).\r\n\r\nAn example file, containing 3 two-dimensional trajectories:\r\n\r\n    2\r\n    3\r\n    0 3 0.0 0.0 1.0 1.0 2.0 2.0\r\n    1 5 -2.0 0.0 -2.0 1.0 -2.0 2.0 -2.0 3.0 -1.0 3.5\r\n    2 5 2.2 3.1 2.5 3.0 2.4 2.5 2.2 2.1 1.5 1.5\r\n\r\n## Interface\r\n\r\nThe main outward-facing classes are _TrajData_ and _COutlierDetector_, which handle the dataset and the outlier detection respectively.\r\n\r\nThe following code block illustrates how to read in data, partition trajectories and find outliers, and output a plot of the trajectory outliers.\r\n\r\n\t// TrajData reads in data and holds trajectory information\r\n\tTrajData data;\r\n\tdata.readFile(\"./hurricane2000_2006.tra\");\r\n\r\n\t// COutlierDetector will find outliers in the provided dataset\r\n\tCOutlierDetector outlierDetector(&data);\r\n\toutlierDetector.PartitionTrajectory();\r\n\toutlierDetector.DetectOutlier();\r\n\r\n\t// Output plot of trajectories and outliers\r\n\tdata.OutputTrajectoryPlot(\"./outlierPlot.eps\");\r\n\r\n## Full Documentation\r\n\r\nThe full API and source documentation can be found [here](./html/index.html).\r\n\r\n[1]: http://dm.kaist.ac.kr/jaegil/papers/icde08.pdf \"Trajectory Outlier Detection Paper\"\r\n[2]: http://dm.kaist.ac.kr/jaegil/ \"Source Code\"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}